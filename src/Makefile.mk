###################################################################
#
# SPADUNIT (generate .mk files)
# Copyright (C) 2015, 2018  Ralf Hemmecke <ralf@hemmecke.org>
#
###################################################################
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
###################################################################
# This Makefile is only here as a convenience to generated tests.mk,
# xfailtests.mk, checkdata.mk, and rules.mk. If tests.mk and rules.mk
# are maintained differently, this code below can be removed.
#
# Generate rules.mk, tests.mk, checkdata.mk, and xfailtests.mk by executing
#   make -sf Makefile.mk
# The files generated by this Makefile can be removed via
#   make -sf Makefile.mk clean
# These generated files are included into the Makefile.am and
# are relevant for which tests are executed.
#
# For convenience there is also
#   make -sf Makefile.mk clean-completely
# which does clean everything that is generated for and during the test.
###################################################################

# We need PERL for this Makefile.
PERL=perl

# Where are all the *-test, *.spad, and *.as files found?
testsrc=t

# The variable TEST_EXTENSIONS should be identical to what can be
# found in Makefile.am.
TEST_EXTENSIONS = .input
MKFILES = rules.mk tests.mk xfailtests.mk checkdata.mk
.PHONY: all clean
all: configure

configure: tests.list ${MKFILES}
	autoreconf -i --verbose -Wall
	./configure
	touch $@ # autoreconf does not update the timestamp
	touch config.status

clean:
	-rm ${patsubst %,${testsrc}/%,${MKFILES} tests.list}

# Testfiles are files that end in "-test". Note "minus" not "dot".
tests.list: ${wildcard ${patsubst %,${testsrc}/*%-test, ${TEST_EXTENSIONS}}}
	echo "Generating from '${^}'"
	${PERL} \
	  -e 'while(<>) { if (s/^--test://) {' \
	  -e '  chomp; $$f = $${ARGV}; $$f =~ s/\-test$$//;' \
	  -e '  $$f =~ m"${testsrc}/(.*)\.([^.]+)$$";' \
	  -e '  print "$$2\t$$1\t$$_\n"' \
	  -e '}}' $^ | sort -u > $@

# Here we determine the content of the TESTS variable from all the
# "--test:TESTNAME" and "--test:xfail-TESTNAME" lines in the test
# file.
# Tests introduced via "--test:NAME" are supposed to take
# less than 10 seconds. Longer tests should be marked via
# "--test:timexxxx-NAME" where xxxx are digits and represent
# approximately how many seconds the test runs.
# Tests with a timexxxx marker will only be included, if the
# value of the TESTTIME variable (which can be set via
# "make TESTTIME=1000") is less than xxxx.
TESTTIME = 10
tests.mk: tests.list
	echo "# This file is generated by 'make TESTTIME=${TESTTIME} -f Makefile.mk $@'" > $@
	${PERL} \
	  -e 'print "TESTS =";' \
	  -e 'while(<>) {' \
	  -e '  /(\S+)\t(\S+)\t(\S+)/;' \
	  -e '  $$name="$$3";' \
	  -e '  $$tst="$$2.$$3.$$1";' \
	  -e '  if ($$name=~/^time([0-9]+-)/) {' \
	  -e '    if ("$$1" < ${TESTTIME}) {print "\\\n$$tst";}' \
	  -e '  } else {print "\\\n$$tst";}' \
	  -e '}' \
	  -e 'print "\n"' $< >> $@

# Here we determine the content of the XFAIL_TESTS variable from all the
# "--test:xfail-TESTNAME" lines in the pamphlet file.
# xfail tests are tests that are expected to fail and are thus considered
# to be succeeding tests.
xfailtests.mk: tests.list
	echo "# This file is generated by 'make -f Makefile.mk $@'" > $@
	${PERL} \
	  -e 'print "XFAIL_TESTS =";' \
	  -e 'while(<>) {/(\S+)\t(\S+)\t(\S+)/; $$e=$$1; $$f=$$2; $$t=$$3;' \
	  -e '  if ($$t =~ /^xfail-/) {print "\\\n$$f.$$t.$$e";}}' \
	  -e 'print "\n"' $< >> $@

# Generate rules for each test. Make sure the file depends
# on the corresponding "-test" source file. We assume that for each
# entry in TEST_EXTENSIONS there is a corresponding definition of a
# EXTENSION_generate macro (see, for example, input_generate in
# Makefile.am). In general, these macros should be defined in
# Makefile.am.
# If there is a file ${testsrc}/deps.mk, then generate a line to
# include that file into the make process.
rules.mk: tests.list
	echo "# This file is generated by 'make -f Makefile.mk $@'" > $@
	if test -r ${testsrc}/deps.mk; then \
	    echo "include ${testsrc}/deps.mk" >> $@; fi
	${PERL} \
	  -e 'while(<>) {' \
	  -e '  /(\S+)\t(\S+)\t(\S+)/; $$e=$$1; $$f=$$2; $$t=$$3;' \
	  -e '  print "$$f.$$t.$$e: ${testsrc}/$$f.$$e-test spadunit.log; \$$($${e}_generate)\n";' \
	  -e '}' \
	  $< >> $@

# All .spad files will serve as check_DATA. They should be
# compiled before the other tests can begin.
checkdata.mk: ${wildcard ${testsrc}/*.as} ${wildcard ${testsrc}/*.spad}
	echo "# This file is generated by 'make -f Makefile.mk $@'" > $@
	echo "check_data_as   = ${patsubst ${testsrc}/%,%.log,${filter %.as,   $^}}" >> $@
	echo "check_data_spad = ${patsubst ${testsrc}/%,%.log,${filter %.spad, $^}}" >> $@
	echo 'check_DATA = $${check_data_as} $${check_data_spad}' >> $@
