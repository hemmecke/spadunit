-- This test is very much bound to the actual implementation
-- of XHashTable and even to the concrete hashing function on
-- Integer keys. That is the reason why it is called xhashdbg.

--setup
)lib TXHASH
Z ==> Integer
N ==> NonNegativeInteger
K ==> Z --Key
E ==> Z --Entry
T ==> TestXHashTable(K, E)
t: T := table()

-- Assume s=bucketSize(t). We look for n keys such that "hash(k) rem s = p1"
-- "1 + hash(k) rem (s-2) = p2".
findKeys(t: T, n: Z, p1: Z, p2: Z): List K == (_
    s: Z := bucketSize t;_
    l: List(Z) := [];_
    k: Z := 0;_
    for z in 0.. while k < n repeat (_
        h1: Z := hash(z)::Z;_
        if positiveRemainder(h1, s) = p1 then_
            if 1+positiveRemainder(h1, s-2) = p2 then (_
                l := cons(z, l);_
                k := inc k));_
    l)
--endsetup

--test:xhashdebug1
l: List K := findKeys(t, 3, 1, 1)
for k in l repeat t.k := -k
assertEquals(position(t, l.1), 1)
assertEquals(position(t, l.2), 1)
assertEquals(position(t, l.3), 1)
assertEquals(probingLength(t, l.1), 0)
assertEquals(probingLength(t, l.2), 1)
assertEquals(probingLength(t, l.3), 2)
remove!(l.1, t)
assertEquals(probingLength(t, l.2), 1)
assertEquals(probingLength(t, l.3), 2)
remove!(l.2, t)
assertEquals(probingLength(t, l.3), 2)
t(l.2) := 100
t(l.1) := 200
assertEquals(probingLength(t, l.1), 1)
assertEquals(probingLength(t, l.2), 0)
assertEquals(probingLength(t, l.3), 2)
--endtest

-- The following tests show that that the probing length depends on the
-- order in which the the elements are inserted.
--test:xhashdebug2
k12: K := first findKeys(t, 2, 1, 2)
k13: K := first findKeys(t, 2, 1, 3)
k41: K := first findKeys(t, 2, 4, 1)
t.k12 := 1
t.k13 := 2
t.k41 := 3
assertEquals(position(t, k12), 1)
assertEquals(position(t, k13), 1)
assertEquals(position(t, k41), 4)
assertEquals(probingLength(t, k12), 0)
assertEquals(probingLength(t, k13), 1)
assertEquals(probingLength(t, k41), 1)
--endtest

--test:xhashdebug3
k12: K := first findKeys(t, 2, 1, 2)
k13: K := first findKeys(t, 2, 1, 3)
k41: K := first findKeys(t, 2, 4, 1)
t.k41 := 3
t.k12 := 1
t.k13 := 2
assertEquals(position(t, k12), 1)
assertEquals(position(t, k13), 1)
assertEquals(position(t, k41), 4)
assertEquals(probingLength(t, k12), 0)
assertEquals(probingLength(t, k13), 2)
assertEquals(probingLength(t, k41), 0)
--endtest

--test:xhashdebug4
k12: K := first findKeys(t, 2, 1, 2)
k13: K := first findKeys(t, 2, 1, 3)
k41: K := first findKeys(t, 2, 4, 1)
t.k41 := 3
t.k13 := 2
t.k12 := 1
assertEquals(position(t, k12), 1)
assertEquals(position(t, k13), 1)
assertEquals(position(t, k41), 4)
assertEquals(probingLength(t, k12), 1)
assertEquals(probingLength(t, k13), 0)
assertEquals(probingLength(t, k41), 0)
--endtest
